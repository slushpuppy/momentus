<?php
/**
 * Created by PhpStorm.
 * User: Luke
 * Date: 30/7/2018
 * Time: 6:29 PM
 */

namespace api\V1\Feed;

use Module\Social\Feed\Social;
use Module\Social\OAuth\Scope;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use OpenApi\Annotations as OA;

class Activity extends \Api\V1\AbstractRestController
{
    private static $_i;

    protected static $permissionScope = NULL;

    private function __construct()
    {
    }

    public static function i()
    {
        if (self::$_i == NULL) {
            self::$_i = new self;
        }
        return self::$_i;
    }

    /**
     * @param ServerRequestInterface $request
     * @param ResponseInterface $response
     * @param array $args
     * @return mixed
     * @throws \Module\Exception\MySQL
     */
    public function get(ServerRequestInterface $request, ResponseInterface $response, array $args) {
        $db = \Lib\Core\Helper\Db\Conn::i()->get();
        $user_id = $this->getActiveUserId();

        $last_id = (!isset($_GET['last_id'])) ? 0 : isset($_GET['last_id']);
        if ($_GET['direction'] == 'prev') {
            $feed = \Module\Social\Feed\Activity::loadWithUserIdBeforePostId($user_id,$last_id,Social::TOPICS_PER_PAGE);
        } else {
            $feed = \Module\Social\Feed\Activity::loadWithUserIdAfterPostId($user_id,$last_id,Social::TOPICS_PER_PAGE);
        }

        $output = [];
        foreach($feed as $row) {
            $temp = new \stdClass();
            $thread = $row->getThread();
            $thread->copyColumnFieldsTo($row);

            $journeys = $thread->getAllJourney();

            $row->map = [];

            foreach($journeys as $journey) {
                $r = new \stdClass();
                $r->positions = $journey->getAllPositions();
            }

            $output[] = $temp;
        }

        return $response->withJson($output);
    }

    public function post(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {

    }

    public function put(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        // TODO: Implement put() method.
    }

    public function patch(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        // TODO: Implement patch() method.
    }

    public function delete(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        // TODO: Implement delete() method.
    }
    public function getScope()
    {
        return Scope::ALL; // TODO: Change the autogenerated stub
    }
}
