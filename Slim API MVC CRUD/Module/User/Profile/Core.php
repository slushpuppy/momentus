<?php
/**
 * Created by PhpStorm.
 * User: Luke
 * Date: 23/9/2018
 * Time: 4:49 PM
 */

namespace Module\User\Profile;


use Lib\Core\Helper\Db\Map\Column;

/**
 * Core
 * @package Module\User\Profile
 * @property mixed $data
 * @property int $user_id
 * @property string $label
 * @property string $key
 */
class Core extends \Lib\Core\Controller\AbstractController
{
    public const TABLE_NAME = 'user_profile_field';
    protected const ID_COLUMN = 'id';
    protected static $_column_cache = NULL;


    /**
     * @param int $user_id
     * @return Core[]
     * @throws \Module\Exception\MySQL
     */
    public static function loadAllWithUserId(int $user_id) {
        return self::_loadAll('user_id=?','i',[$user_id]);
    }

    public static function _loadAll(string $where, string $paramTypes, array $param)
    {
        $return = parent::_loadAll($where, $paramTypes, $param); // TODO: Change the autogenerated stub
        foreach ($return as $index => $row) {
            $module = $row->module;
            if ($module != 'Core') {
                $str = '\Module\User\Profile\\'.$module;
                $obj = new $str();

                $obj->_loadData($row->_getData());
                $return[$index] = $obj;
            }
        }
        return $return;
    }

    public function getData() {
        return $this->data;
    }
    /**
     *
     * @return Lib\Core\Helper\Db\Map\Column[]
     */
    public static function getColumns()
    {
        if (static::$_column_cache == NULL) {
            static::$_column_cache = [
                new Column(self::TABLE_NAME,'user_id', 'i'),
                new Column(self::TABLE_NAME,'data', 'b'),
                (new Column(self::TABLE_NAME,
                    'field_data_type',
                    'i',

                ))->join("id",),
                (new Column('user_profile_field_type.key','s',null,'user_profile_field_type.id'))->selectColumn('user_profile_field_type.label')
                    ->selectColumn('user_profile_field_type.module')
            ];
        }
        return static::$_column_cache;
    }
}


