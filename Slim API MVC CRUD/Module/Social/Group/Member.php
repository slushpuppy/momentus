<?php
/**
 * Created by PhpStorm.
 * User: Luke
 * Date: 29/3/2019
 * Time: 12:56 AM
 */

namespace Module\Social\Group;


use Lib\Core\Helper\Db\Conn;
use Lib\Core\Helper\Db\Map\Column;
use Module\Notification\Websocket\Channel;
use Module\Social\Group\Permission\MemberRole;
use Module\User\Account;

/**
 * Class Member
 * @package Module\Social\Group
 * @property int $social_group_id
 * @property int $member_id
 * @property int $role_id
 * @property int $join_time
 * @property string $member_display_name
 * @property string $member_avatar
 */
class Member extends \Lib\Core\Controller\AbstractController
{
    /**
     *
     */
    public const TABLE_NAME = 'social_group_member';
    /**
     *
     */
    protected const ID_COLUMN = '';
    /**
     * @var null
     */
    protected static $_column_cache = NULL;

    /**
     * @return Lib\Core\Helper\Db\Map\Column[]
     */
    public static function getColumns()
    {
        if (static::$_column_cache == NULL) {
            static::$_column_cache = [
                new Column(self::TABLE_NAME,'social_group_id', 'i'),
                (new Column(self::TABLE_NAME,'user_id', 'i'))->setAlias('member_id')->join('id',Account::getAvatarDisplayNameColumns()),
                new Column(self::TABLE_NAME,'join_time', 'i'),



            ];
        }
        return static::$_column_cache;
    }

    /**
     * @param int $memberId
     * @param int $groupId
     * @return Member|null
     * @throws \Module\Exception\MySQL
     */
    public static function loadWithMemberGroupId(int $memberId, int $groupId)
    {
        return static::_load('user_id=? and social_group_id=?','ii',[$memberId,$groupId]);

    }

    /**
     * @param int $memberId
     * @param int $groupId
     */
    public static function createWithMemberGroup(Account $member, Group $group) {
        $obj = new self();
        $obj->join_time = time();
        $obj->member_id = $member->id();
        $obj->member_avatar = $member->avatar_media_path;
        $obj->social_group_id = $group->id();
        $obj->member_display_name = $member->display_name;
        $obj->save();
        return $obj;
    }

    /**
     * @return MemberRole[]
     * @throws \Module\Exception\Controller
     * @throws \Module\Exception\MySQL
     */
    public function getPermissions() {
        return MemberRole::loadAllWithUserId($this->id());
    }

    public function save(bool $updateIfFound = true)
    {
        parent::save($updateIfFound); // TODO: Change the autogenerated stub
        if ($this->id() > 0) {

            $chan = Channel::createChannelFromModuleNameId(Group::TABLE_NAME,$this->social_group_id,$this->member_id);
            $chan->save(true);
        }
    }
}


