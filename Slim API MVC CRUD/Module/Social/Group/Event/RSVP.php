<?php


namespace Module\Social\Group\Event;


use Lib\Core\Helper\Db\Map\Column;
use Module\Notification\Websocket\Channel;
use Module\Notification\Websocket\IChannel;
use Module\User\Account;

/**
 * Class RSVP
 * @package Module\Social\Group\Event
 * @property string $member_display_name
 * @property string $member_avatar
 * @property int $avatar_media_id
 * @property int $user_id
 * @property int $time
 * @property int $social_group_event_id
 */
class RSVP extends \Lib\Core\Controller\AbstractController implements IChannel
{
    public const TABLE_NAME = 'social_group_event_rsvp';
    protected const ID_COLUMN = 'id';
    protected const SOURCE_MODULE = 'Module\Social\Group\Event\RSVP';
    protected static $_column_cache = NULL;

    /**
     *
     * @return Lib\Core\Helper\Db\Map\Column[]
     */
    public static function getColumns()
    {
        if (static::$_column_cache == NULL)
        {
            static::$_column_cache = [
                (new Column(self::TABLE_NAME, 'social_group_event_id','i')),
                (new Column(self::TABLE_NAME, 'user_id','i'))->join('id', Account::getAvatarDisplayNameColumns('member_display_name','member_avatar')),
                (new Column(self::TABLE_NAME, 'time','i')),


            ];
        }
        return static::$_column_cache;
    }

    /**
     * @param int $eventId
     * @return RSVP[]
     * @throws \Module\Exception\MySQL
     */
    public function loadAllFromEventId(int $eventId) {
        return static::_loadAll('social_group_event_id=?','i',[$eventId]);
    }

    /**
     * @param int $eventId
     * @param Account $user
     * @throws \Module\Exception\Controller
     * @throws \Module\Exception\MySQL
     * @return RSVP
     */
    public static function createFromEventId(int $eventId, Account $user) {
        $obj = new self();
        $obj->time = time();
        $obj->user_id = $user->id();
        $obj->member_avatar = $user->getAvatarUrl();
        $obj->member_display_name = $user->display_name;
        $obj->social_group_event_id = $eventId;
        $obj->save(true);
        return $obj;
    }

    /**
     * @param bool $updateIfFound
     * @throws \Module\Exception\Controller
     * @throws \Module\Exception\MySQL
     */
    public function save(bool $updateIfFound = true)
    {
        parent::save($updateIfFound); // TODO: Change the autogenerated stub
        if ($this->id() > 0) {
            $chan = Channel::createChannelFromObject($this,$this->user_id);
        }
    }

    /**
     * @return string
     */
    public function getChannelName()
    {
        return Channel::createDefaultChannelName(self::TABLE_NAME,$this->id());
    }
}


