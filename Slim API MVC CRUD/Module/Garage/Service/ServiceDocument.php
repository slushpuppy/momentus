<?php


namespace Module\Garage\Service;


use Lib\Core\Helper\Db\Map\Column;
use Module\Exception\InvalidData;

/**
 * Class ServiceDocument
 * @package Module\Garage\Service
 * @property int $vehicle_service_id
 * @property int $media_id
 * @property string $media_path
 * @property string $media_type
 * @property int $time
 */
class ServiceDocument extends \Lib\Core\Controller\AbstractController
{
    public const TABLE_NAME = 'vehicle_service_photo';
    protected const ID_COLUMN = '';
    protected const SOURCE_MODULE = "Module\Garage\Service\\ServiceDocument";
    protected static $_column_cache = NULL;

    public const TYPE_ODOMETRY="odometry_photo";
    public const TYPE_RECEIPT="receipt_photo";
    public const TYPE_SERVICE_PHOTO="service_photo";

    /**
     *
     * @return Lib\Core\Helper\Db\Map\Column[]
     */
    public static function getColumns()
    {
        if (static::$_column_cache == NULL)
        {
            static::$_column_cache = [
                (new Column(self::TABLE_NAME, 'vehicle_service_id','i')),
                (new Column(self::TABLE_NAME, 'media_id','i'))->join('id',(new Column('media'))->addSelectColumnAlias('path','media_path')),
                (new Column(self::TABLE_NAME, 'type_sys_string_id','i'))->join('id',Column::getSysTextColumn()->setAlias('media_type')),
                (new Column(self::TABLE_NAME, 'time','i')),


            ];
        }
        return static::$_column_cache;
    }

    /**
     * @param int $serviceId
     * @param Document $doc
     * @param string $type
     * @param int $time
     * @return ServiceDocument
     * @throws \Module\Exception\Controller
     */
    public static function createWithServiceId(int $serviceId, Document $doc,string $type,int $time) {
        $ret = new static();
        $ret->vehicle_service_id = $serviceId;
        $ret->media_id = $doc->id();
        $ret->media_path = $doc->getFilePath();
        $ret->media_type = $type;
        $ret->time = $time;
        $ret->save(true);
        return $ret;
    }

    /**
     * @param int $serviceId
     * @return ServiceDocument[]
     * @throws \Module\Exception\MySQL
     */
    public static function loadAllWithServiceId(int $serviceId) {
        return static::_loadAll('vehicle_service_id=?','i',[$serviceId]);
    }

    public function save(bool $updateIfFound = true)
    {
        if (!\in_array($this->media_type,[static::TYPE_ODOMETRY,self::TYPE_SERVICE_PHOTO,self::TYPE_RECEIPT]))
            throw new InvalidData("Invalid type");
        parent::save($updateIfFound); // TODO: Change the autogenerated stub
    }

    public function getUrl()
    {
        return Document::getUrlFromPath($this->media_path);
    }
}


