<?php


namespace Lib\Form;


use Lib\Core\Helper\Db\Map\Column;
use Lib\Core\Helper\Db\Map\ColumnStringIndex;
use Lib\Core\System\DbString;

/**
 * Class Field
 * @package Lib\Form
 * @property string $group_key
 * @property string $field_key
 * @property string $type
 *
 */
abstract class Field extends \Lib\Core\Controller\AbstractController
{
    public const TABLE_NAME = 'form_field';
    protected const ID_COLUMN = 'id';
    protected const SOURCE_MODULE = 'Lib\Form\Field';
    protected static $_column_cache = NULL;

    /**
     * @return string
     */
    public abstract static function getFormGroupKey();

    /**
     * @param string $key
     * @return static[]
     * @throws \Module\Exception\MySQL
     */
    public static function loadAllWithFormGroupKey() {
        return static::_loadAll('form_group_key=?','s',[static::getFormGroupKey()]);
    }

    /**
     * @param string $fieldKey
     * @return Field[]
     * @throws \Module\Exception\MySQL
     */
    public static function loadWithFieldKey(string $fieldKey) {
        return static::_loadAll('field_key_str_id=(select field_search.id from '.DbString::TABLE_NAME.' field_search where field_search.name=?) and form_group_key_str_id=(select field_search1.id from '.DbString::TABLE_NAME.' field_search1 where field_search1.name=?)','ss',[$fieldKey,static::getFormGroupKey()]);
    }

    /**
     * @param int $memberId
     * @return Value
     */
    public function getValue(int $memberId) {

        $className ='\\'.$this->type;
        return $className::loadWithFormFieldId($this->id,$memberId);
    }

    /**
     *
     * @return Lib\Core\Helper\Db\Map\Column[]
     */
    public static function getColumns()
    {
        if (static::$_column_cache == NULL)
        {
            static::$_column_cache = [
                (new Column(static::TABLE_NAME, 'form_group_key_str_id', 'i'))->join('id',(new ColumnStringIndex())->setTableAlias('s1')->setAlias('group_key')),
                (new Column(static::TABLE_NAME, 'type_str_id', 's'))->join('id', (new ColumnStringIndex())->setTableAlias('s2')->setAlias('type')),
                (new Column(static::TABLE_NAME, 'field_key_str_id', 's'))->join('id', (new ColumnStringIndex())->setTableAlias('s3')->setAlias('field_key')),

            ];
        }
        return static::$_column_cache;
    }
    public function save(bool $updateIfFound = true)
    {
        $this->group_key = static::getFormGroupKey();
        $this->type = \addslashes($this->type);

        parent::save($updateIfFound); // TODO: Change the autogenerated stub
    }
}


